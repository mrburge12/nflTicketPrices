commerceLink <- function(apiKey, eventID){
rootURL<-"https://app.ticketmaster.com/commerce/v2/events"
params<-c("/", "/offers.json?apikey=")
values<- c(eventID, apiKey)
args<- str_c(params, values, collapse = "")
str_c(rootURL, args)
}
priceInfo[i]<-commerceLink(apiKey,eventID)
con<-curl(priceInfo[i])
answer_json[i]<-readLines(con)
prices[i]<-
answer_json[i] %>%
minify()
}
save.image("C:/Users/mrbur/Desktop/nflTicketPrices/data/rawDataWorkspaces/ticketmaster/tm_2018-12-17.RData")
#install.packages(c("tidyverse", "stringr", "knitr", "curl", "jsonlite", "XML", "httr", "rvest", "ggmap"))
setwd('C:/Users/mrbur/Desktop/nflTicketPrices/code')
library(stringr)
library(knitr)
library(curl)
library(jsonlite)
library(httr)
library(rvest)
timestamp<-Sys.time()
client_id<-"MTI0MTQ5NzR8MTUzMjYxOTczNC4wMw"
client_secret<-"6a9738d0c19f46825345dc5f47527b906a42c176a643b86adca2fd2ecbea65ad"
q<-"nfl"
perpage<-1000
seatGeekListings <- vector("numeric")
response<- vector("numeric")
answer_json<- vector("numeric")
# Function for API Query
seatGeekLink <- function(client_id, client_secret, q){
rootURL<-"https://api.seatgeek.com/2/events?"
params<-c( "per_page=" , "client_id=", "client_secret=","q=")
values<- c(perpage, client_id, client_secret, q)
args<- str_c(params, values, collapse = "&")
str_c(rootURL, args)
}
seatGeekListings<-seatGeekLink(client_id,client_secret,q)
con<-curl(seatGeekListings)
answer_json<-readLines(con)
response<-
answer_json %>%
prettify() %>%
fromJSON()
game<-response$events$title
eventData<-response$events
data<-response$events
## GET PRICING DATA
priceInfo <- vector("numeric", nrow(data))
prices<- matrix("numeric", nrow=length(data[,1]), ncol=length(data[,1]))
answer_json<- vector("numeric", nrow(data))
for(i in 1:nrow(data)) {
eventID <- data$id[i]
priceLink <- function(client_id, client_secret){
rootURL<-"https://api.seatgeek.com/2/events?"
params<-c("id=", "client_id=", "client_secret=")
values<- c(eventID, client_id, client_secret )
args<- str_c(params, values, collapse = "&")
str_c(rootURL, args)
}
priceInfo[i]<-priceLink(client_id, client_secret)
con<-curl(priceInfo[i])
answer_json[i]<-readLines(con)
prices[i]<- answer_json[i]
#prices[i]<-gsubfn(".",list("\\{"= "", "\\}" = "", ":" = "", "\"" = "", "," = "|", "\\}\\]\\}" = "","{{" = "", "}}" = "", "\\}\\]" = "", "\\[\\{" = "" , "\\{in_hand\\{\\}" = "" , "\\[\\]" = ""), prices[i])
#prices[i]<-prettify(prices[i])
}
#for(i in 1:nrow(data)) {
# prices[i]<-strsplit(prices[i],"|", fixed=TRUE)
#}
save.image("C:/Users/mrbur/Desktop/nflTicketPrices/data/rawDataWorkspaces/seatgeek/sg_2018-12-17.RData")
#install.packages(c("tidyverse", "stringr", "knitr", "curl", "jsonlite", "XML", "httr", "rvest", "ggmap"))
setwd('C:/Users/mrbur/Desktop/nflTicketPrices/code')
library(stringr)
library(knitr)
library(curl)
library(jsonlite)
library(httr)
library(rvest)
timestamp<-Sys.time()
client_id<-"MTI0MTQ5NzR8MTUzMjYxOTczNC4wMw"
client_secret<-"6a9738d0c19f46825345dc5f47527b906a42c176a643b86adca2fd2ecbea65ad"
q<-"nfl"
perpage<-1000
seatGeekListings <- vector("numeric")
response<- vector("numeric")
answer_json<- vector("numeric")
# Function for API Query
seatGeekLink <- function(client_id, client_secret, q){
rootURL<-"https://api.seatgeek.com/2/events?"
params<-c( "per_page=" , "client_id=", "client_secret=","q=")
values<- c(perpage, client_id, client_secret, q)
args<- str_c(params, values, collapse = "&")
str_c(rootURL, args)
}
seatGeekListings<-seatGeekLink(client_id,client_secret,q)
con<-curl(seatGeekListings)
answer_json<-readLines(con)
response<-
answer_json %>%
prettify() %>%
fromJSON()
game<-response$events$title
eventData<-response$events
data<-response$events
## GET PRICING DATA
priceInfo <- vector("numeric", nrow(data))
prices<- matrix("numeric", nrow=length(data[,1]), ncol=length(data[,1]))
answer_json<- vector("numeric", nrow(data))
for(i in 1:nrow(data)) {
eventID <- data$id[i]
priceLink <- function(client_id, client_secret){
rootURL<-"https://api.seatgeek.com/2/events?"
params<-c("id=", "client_id=", "client_secret=")
values<- c(eventID, client_id, client_secret )
args<- str_c(params, values, collapse = "&")
str_c(rootURL, args)
}
priceInfo[i]<-priceLink(client_id, client_secret)
con<-curl(priceInfo[i])
answer_json[i]<-readLines(con)
prices[i]<- answer_json[i]
#prices[i]<-gsubfn(".",list("\\{"= "", "\\}" = "", ":" = "", "\"" = "", "," = "|", "\\}\\]\\}" = "","{{" = "", "}}" = "", "\\}\\]" = "", "\\[\\{" = "" , "\\{in_hand\\{\\}" = "" , "\\[\\]" = ""), prices[i])
#prices[i]<-prettify(prices[i])
}
#for(i in 1:nrow(data)) {
# prices[i]<-strsplit(prices[i],"|", fixed=TRUE)
#}
save.image("C:/Users/mrbur/Desktop/nflTicketPrices/data/rawDataWorkspaces/seatgeek/sg_2018-12-18.RData")
#install.packages(c("tidyverse", "stringr", "knitr", "curl", "jsonlite", "XML", "httr", "rvest", "ggmap"))
#install.packages(c("tidyverse", "stringr", "knitr", "curl", "jsonlite", "XML", "httr", "rvest", "ggmap"))
library(tidyverse)
library(stringr)
library(knitr)
library(curl)
library(jsonlite)
library(XML)
library(httr)
library(rvest)
library(ggmap)
library(dplyr)
library(rlist)
library(gsubfn)
timestamp<-Sys.time()
date<-Sys.Date()
###################
## Pull Event Data
###################
apiKey<-"BDMDMNv2wXwAZMRAlavHs371eUadxLbq"
consumerSecret<-"o8eJaby9afZL45s3"
keyword<-"NFL"
segmentID<-"KZFzniwnSyZfZ7v7nE"
sementName<-"Sports"
genreID<-"KnvZfZ7vAdE"
genreName<-"Football"
subgenreID<-"KZazBEonSMnZfZ7vFE1"
subgenreName<-"NFL"
typeName<-"Group"
subtypeID<-"KZFzBErXgnZfZ7vA7d"
subtypeName<-"Team"
size<-200
# Function for API Query
ticketMasterLink <- function(apiKey, keyword, size){
rootURL<-"https://app.ticketmaster.com/discovery/v2/events.json?"
params<-c( "apikey=", "keyword=","size=")
values<- c(apiKey, keyword, size)
args<- str_c(params, values, collapse = "&")
str_c(rootURL, args)
}
# requestNFLGames
nflGames<-ticketMasterLink(apiKey,keyword,size)
con<-curl(nflGames)
answer_json<-readLines(con)
response<-
answer_json %>%
prettify() %>%
fromJSON()
eventData<-response$`_embedded`$events
eventData<-eventData[!(eventData$dates$status$code %in% c("offsale")), ]
eventData<-eventData[(eventData$promoter$id %in% c("705")), ]
#############################
## Pull Inventory Status Data
#############################
inventoryInfo <- vector("numeric", nrow(eventData))
inventory<- vector("numeric", nrow(eventData))
answer_json<- vector("numeric", nrow(eventData))
for (i in 1:nrow(eventData)) {
inventoryStatusLink <- function(apiKey, eventID){
eventID <- eventData[i,3]
rootURL<-"https://app.ticketmaster.com/inventory-status/v1/availability?"
params<-c("events=", "apikey=")
values<- c(eventID, apiKey)
args<- str_c(params, values, collapse = "&")
str_c(rootURL, args)
}
inventoryInfo[i]<-inventoryStatusLink(apiKey,eventID)
con<-curl(inventoryInfo[i])
answer_json[i]<-readLines(con)
inventory[i]<-
answer_json[i] %>%
prettify() %>%
fromJSON()
}
inventoryStatus<-str_replace_all(answer_json, '\\}', "")
inventoryStatus<-str_replace_all(inventoryStatus, '\\]', "")
inventoryStatus<-str_replace_all(inventoryStatus, '""', "")
inventoryStatus<-str_replace_all(inventoryStatus, '\"', "")
inventoryStatus<-str_replace_all(inventoryStatus, '\\[', "")
inventoryStatus<-str_replace_all(inventoryStatus, '\\:', "")
inventoryStatus<-str_replace_all(inventoryStatus, '\\,', "")
inventoryStatus<-str_replace_all(inventoryStatus, '\\{', "")
inventoryStatus<-str_replace_all(inventoryStatus, "eventId","")
inventoryStatus<-str_replace_all(inventoryStatus, "status","")
inventoryStatus<-str_replace_all(inventoryStatus,"FEW_TICKETS_LEFT", "")
inventoryStatus<-str_replace_all(inventoryStatus,"FEWTICKETSLEFT", "")
inventoryStatus<-str_replace_all(inventoryStatus,"TICKETS_AVAILABLE", "")
inventoryStatus<-str_replace_all(inventoryStatus,"TICKETSAVAILABLE", "")
inventoryStatus<-inventoryStatus[!grepl("TICKETSNOTAVAILABLE", inventoryStatus)]
inventoryStatus<-inventoryStatus[!grepl("TICKETS_NOT_AVAILABLE", inventoryStatus)]
inventoryStatus<-inventoryStatus[!inventoryStatus == "k7vGF4krY_byt"]
inventoryStatus<-inventoryStatus[!inventoryStatus == "vvG1zZ46eEGtzP"]
inventoryStatus<-inventoryStatus[!inventoryStatus == "k7vGF4krY3IzP"]
inventoryStatus<-inventoryStatus[!inventoryStatus == "k7vGF4krY9Iyx"]
inventoryStatus<-inventoryStatus[!inventoryStatus == "k7vGF4krY4Iy8"]
inventoryStatus<-inventoryStatus[!inventoryStatus == "k7vGF4krYfIyG"]
inventoryStatus<-inventoryStatus[!inventoryStatus == "k7vGF4krYobzq"]
inventoryStatus<-inventoryStatus[!inventoryStatus == "k7vGF4krYbbyJ"]
inventoryStatus<-inventoryStatus[!inventoryStatus == "vvG1zZ46e154S9"]
############################
## Pull Commerce/Price Data
############################
priceInfo <-vector("numeric", length(inventoryStatus))
prices<-vector("numeric", length(inventoryStatus))
answer_json<- vector("numeric", length(inventoryStatus))
for(i in 1:length(inventoryStatus)) {
eventID <- inventoryStatus[i]
commerceLink <- function(apiKey, eventID){
rootURL<-"https://app.ticketmaster.com/commerce/v2/events"
params<-c("/", "/offers.json?apikey=")
values<- c(eventID, apiKey)
args<- str_c(params, values, collapse = "")
str_c(rootURL, args)
}
priceInfo[i]<-commerceLink(apiKey,eventID)
con<-curl(priceInfo[i])
answer_json[i]<-readLines(con)
prices[i]<-
answer_json[i] %>%
minify()
}
save.image("C:/Users/mrbur/Desktop/nflTicketPrices/data/rawDataWorkspaces/ticketmaster/tm_2018-12-18.RData")
#install.packages(c("tidyverse", "stringr", "knitr", "curl", "jsonlite", "XML", "httr", "rvest", "ggmap"))
setwd('C:/Users/g1mxb12/Desktop/nflTicketPrices/code')
library(stringr)
library(knitr)
library(curl)
library(jsonlite)
library(httr)
library(rvest)
timestamp<-Sys.time()
client_id<-"MTI0MTQ5NzR8MTUzMjYxOTczNC4wMw"
client_secret<-"6a9738d0c19f46825345dc5f47527b906a42c176a643b86adca2fd2ecbea65ad"
q<-"nfl"
perpage<-1000
seatGeekListings <- vector("numeric")
response<- vector("numeric")
answer_json<- vector("numeric")
# Function for API Query
seatGeekLink <- function(client_id, client_secret, q){
rootURL<-"https://api.seatgeek.com/2/events?"
params<-c( "per_page=" , "client_id=", "client_secret=","q=")
values<- c(perpage, client_id, client_secret, q)
args<- str_c(params, values, collapse = "&")
str_c(rootURL, args)
}
seatGeekListings<-seatGeekLink(client_id,client_secret,q)
con<-curl(seatGeekListings)
answer_json<-readLines(con)
response<-
answer_json %>%
prettify() %>%
fromJSON()
game<-response$events$title
eventData<-response$events
data<-response$events
## GET PRICING DATA
priceInfo <- vector("numeric", nrow(data))
prices<- matrix("numeric", nrow=length(data[,1]), ncol=length(data[,1]))
answer_json<- vector("numeric", nrow(data))
for(i in 1:nrow(data)) {
eventID <- data$id[i]
priceLink <- function(client_id, client_secret){
rootURL<-"https://api.seatgeek.com/2/events?"
params<-c("id=", "client_id=", "client_secret=")
values<- c(eventID, client_id, client_secret )
args<- str_c(params, values, collapse = "&")
str_c(rootURL, args)
}
priceInfo[i]<-priceLink(client_id, client_secret)
con<-curl(priceInfo[i])
answer_json[i]<-readLines(con)
prices[i]<- answer_json[i]
#prices[i]<-gsubfn(".",list("\\{"= "", "\\}" = "", ":" = "", "\"" = "", "," = "|", "\\}\\]\\}" = "","{{" = "", "}}" = "", "\\}\\]" = "", "\\[\\{" = "" , "\\{in_hand\\{\\}" = "" , "\\[\\]" = ""), prices[i])
#prices[i]<-prettify(prices[i])
}
#for(i in 1:nrow(data)) {
# prices[i]<-strsplit(prices[i],"|", fixed=TRUE)
#}
save.image("C:/Users/g1mxb12/Desktop/nflTicketPrices/data/rawDataWorkspaces/seatgeek/sg_2018-12-19.RData")
#install.packages(c("tidyverse", "stringr", "knitr", "curl", "jsonlite", "XML", "httr", "rvest", "ggmap"))
#install.packages(c("tidyverse", "stringr", "knitr", "curl", "jsonlite", "XML", "httr", "rvest", "ggmap"))
library(tidyverse)
library(stringr)
library(knitr)
library(curl)
library(jsonlite)
library(XML)
library(httr)
library(rvest)
library(ggmap)
library(dplyr)
library(rlist)
library(gsubfn)
timestamp<-Sys.time()
date<-Sys.Date()
###################
## Pull Event Data
###################
apiKey<-"BDMDMNv2wXwAZMRAlavHs371eUadxLbq"
consumerSecret<-"o8eJaby9afZL45s3"
keyword<-"NFL"
segmentID<-"KZFzniwnSyZfZ7v7nE"
sementName<-"Sports"
genreID<-"KnvZfZ7vAdE"
genreName<-"Football"
subgenreID<-"KZazBEonSMnZfZ7vFE1"
subgenreName<-"NFL"
typeName<-"Group"
subtypeID<-"KZFzBErXgnZfZ7vA7d"
subtypeName<-"Team"
size<-200
# Function for API Query
ticketMasterLink <- function(apiKey, keyword, size){
rootURL<-"https://app.ticketmaster.com/discovery/v2/events.json?"
params<-c( "apikey=", "keyword=","size=")
values<- c(apiKey, keyword, size)
args<- str_c(params, values, collapse = "&")
str_c(rootURL, args)
}
# requestNFLGames
nflGames<-ticketMasterLink(apiKey,keyword,size)
con<-curl(nflGames)
answer_json<-readLines(con)
response<-
answer_json %>%
prettify() %>%
fromJSON()
eventData<-response$`_embedded`$events
eventData<-eventData[!(eventData$dates$status$code %in% c("offsale")), ]
eventData<-eventData[(eventData$promoter$id %in% c("705")), ]
#############################
## Pull Inventory Status Data
#############################
inventoryInfo <- vector("numeric", nrow(eventData))
inventory<- vector("numeric", nrow(eventData))
answer_json<- vector("numeric", nrow(eventData))
for (i in 1:nrow(eventData)) {
inventoryStatusLink <- function(apiKey, eventID){
eventID <- eventData[i,3]
rootURL<-"https://app.ticketmaster.com/inventory-status/v1/availability?"
params<-c("events=", "apikey=")
values<- c(eventID, apiKey)
args<- str_c(params, values, collapse = "&")
str_c(rootURL, args)
}
inventoryInfo[i]<-inventoryStatusLink(apiKey,eventID)
con<-curl(inventoryInfo[i])
answer_json[i]<-readLines(con)
inventory[i]<-
answer_json[i] %>%
prettify() %>%
fromJSON()
}
inventoryStatus<-str_replace_all(answer_json, '\\}', "")
inventoryStatus<-str_replace_all(inventoryStatus, '\\]', "")
inventoryStatus<-str_replace_all(inventoryStatus, '""', "")
inventoryStatus<-str_replace_all(inventoryStatus, '\"', "")
inventoryStatus<-str_replace_all(inventoryStatus, '\\[', "")
inventoryStatus<-str_replace_all(inventoryStatus, '\\:', "")
inventoryStatus<-str_replace_all(inventoryStatus, '\\,', "")
inventoryStatus<-str_replace_all(inventoryStatus, '\\{', "")
inventoryStatus<-str_replace_all(inventoryStatus, "eventId","")
inventoryStatus<-str_replace_all(inventoryStatus, "status","")
inventoryStatus<-str_replace_all(inventoryStatus,"FEW_TICKETS_LEFT", "")
inventoryStatus<-str_replace_all(inventoryStatus,"FEWTICKETSLEFT", "")
inventoryStatus<-str_replace_all(inventoryStatus,"TICKETS_AVAILABLE", "")
inventoryStatus<-str_replace_all(inventoryStatus,"TICKETSAVAILABLE", "")
inventoryStatus<-inventoryStatus[!grepl("TICKETSNOTAVAILABLE", inventoryStatus)]
inventoryStatus<-inventoryStatus[!grepl("TICKETS_NOT_AVAILABLE", inventoryStatus)]
inventoryStatus<-inventoryStatus[!inventoryStatus == "k7vGF4krY_byt"]
inventoryStatus<-inventoryStatus[!inventoryStatus == "vvG1zZ46eEGtzP"]
inventoryStatus<-inventoryStatus[!inventoryStatus == "k7vGF4krY3IzP"]
inventoryStatus<-inventoryStatus[!inventoryStatus == "k7vGF4krY9Iyx"]
inventoryStatus<-inventoryStatus[!inventoryStatus == "k7vGF4krY4Iy8"]
inventoryStatus<-inventoryStatus[!inventoryStatus == "k7vGF4krYfIyG"]
inventoryStatus<-inventoryStatus[!inventoryStatus == "k7vGF4krYobzq"]
inventoryStatus<-inventoryStatus[!inventoryStatus == "k7vGF4krYbbyJ"]
inventoryStatus<-inventoryStatus[!inventoryStatus == "vvG1zZ46e154S9"]
############################
## Pull Commerce/Price Data
############################
priceInfo <-vector("numeric", length(inventoryStatus))
prices<-vector("numeric", length(inventoryStatus))
answer_json<- vector("numeric", length(inventoryStatus))
for(i in 1:length(inventoryStatus)) {
eventID <- inventoryStatus[i]
commerceLink <- function(apiKey, eventID){
rootURL<-"https://app.ticketmaster.com/commerce/v2/events"
params<-c("/", "/offers.json?apikey=")
values<- c(eventID, apiKey)
args<- str_c(params, values, collapse = "")
str_c(rootURL, args)
}
priceInfo[i]<-commerceLink(apiKey,eventID)
con<-curl(priceInfo[i])
answer_json[i]<-readLines(con)
prices[i]<-
answer_json[i] %>%
minify()
}
save.image("C:/Users/g1mxb12/Desktop/nflTicketPrices/data/rawDataWorkspaces/ticketmaster/tm_2018-12-19.RData")
library(jsonlite)
library(data.table)
library(dplyr)
setwd('C:/Users/g1mxb12/Desktop/nflTicketPrices/data/rawDataWorkspaces/seatgeek/')
path = 'C:/Users/g1mxb12/Desktop/nflTicketPrices/data/rawDataWorkspaces/seatgeek/'
out.file<-""
file.names <- dir(path, pattern =".RData")
#initialize data tables
finalData<- data.table()
finalPriceData<-data.table()
#Loop through workspaces
for(i in 1:length(file.names)){
data <- load(file.names[i])
#Set up all of the individual data frames
#Start with main event data
eventData<-response$events
#Pull out nested data frames
dropStatsCols<- c("dq_bucket_counts")
dupCols<- c("created_at", "employee_only", "id", "score", "url", "method", "popularity")
stats<-eventData$stats[,!names(eventData$stats) %in% dropStatsCols]
for (col in dupCols) {
colnames(stats)[colnames(stats)== col] <- paste(col,"_stats", sep = "")
}
access_method<-eventData$access_method
for (col in dupCols) {
colnames(access_method)[colnames(access_method)== col] <- paste(col,"_accessMethod", sep = "")
}
#There's two nested data frames in the venue data frame, which is itself nested in eventData
#These two data frames are separated from the rest of the venue data frame
eventLocationLongLat<-eventData$venue$location
venueAccess_method<-eventData$venue$access_method
for (col in dupCols) {
colnames(venueAccess_method)[colnames(venueAccess_method)== col] <- paste(col,"_AccessMethod", sep = "")
}
#These two lines of code remove columns from a data frame by name
#the purpose of un-nesting the data is to avoid duplication and to make
#dat easier to export
dropVenueDataCols<- c("location", "access_method", "links")
venue<-eventData$venue[,!names(eventData$venue) %in% dropVenueDataCols]
for (col in dupCols) {
colnames(venue)[colnames(venue)== col] <- paste(col,"_venue", sep = "")
}
#At this point, we exclude taxonomies, performers, and links (they don't provide any necessary info for pricing)
#they are also going to be costly to clean up due to their nested nature.
#this is something I can revisit later if necessary
#We remove columns from eventData if they are listed in another dataframe
dropEventDataCols <- c("stats", "venue", "access_method", "taxonomies","announcements", "performers", "links", "dq_bucket_counts")
eventData<- eventData[ , !(names(eventData) %in% dropEventDataCols)]
#fix timestamp variable
timestamp<-gsub(" ", "_", timestamp)
timestamp<-gsub(":",".", timestamp)
date<-substr(x = timestamp,1,10)
#Combine dataframes to export
finalEventData<-as.data.table(cbind(date,timestamp, eventData, stats, access_method, venue, eventLocationLongLat, venueAccess_method))
outputFileName <- paste("C:/Users/g1mxb12/Desktop/nflTicketPrices/data/seatgeek/cleanData/eventData/individual/sg_", timestamp, ".csv",sep="")
write.csv(finalEventData, file = outputFileName)
}
library(jsonlite)
library(data.table)
library(dplyr)
setwd('C:/Users/g1mxb12/Desktop/nflTicketPrices/data/seatgeek/cleanData/eventData/individual')
path = 'C:/Users/g1mxb12/Desktop/nflTicketPrices/data/seatgeek/cleanData/eventData/individual'
#out.file <- ""
file.names <- dir(path, pattern =".csv")
#Initialize data to merge with by pulling in the first available data frame
finalData <- read.csv(file.names[1])
finalData<-as.data.table(finalData)
for(i in 2:length(file.names)){
data <- read.csv(file.names[i])
data <- as.data.table(data)
finalData<- rbind(data, finalData, fill = TRUE)
finalData<- finalData %>%
select(noquote(order(colnames(finalData))))
finalData<- finalData[!duplicated(finalData),]
}
outputFileName <- paste("C:/Users/g1mxb12/Desktop/nflTicketPrices/data/seatgeek/cleanData/eventData/finalData",Sys.Date(),".csv",sep="")
write.csv(finalData, file = outputFileName)
exit
exit()
